<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Route;

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
| These routes are loaded by the RouteServiceProvider within a group which
| is assigned the "api" middleware group.
|
*/

/**
 * Quick test route:
 * GET /api/hello?name=World
 */
Route::get('/hello', function (Request $request) {
    return response()->json([
        'ok'   => true,
        'name' => $request->query('name', 'World'),
    ]);
});

/**
 * Helper: CH HTTP client
 */
function chClient(): \Illuminate\Http\Client\PendingRequest
{
    $key  = config('ch.key', env('CH_API_KEY'));
    return Http::withBasicAuth($key, '')
        ->acceptJson()
        ->timeout((int) config('ch.timeout', 15));
}

/**
 * Helper: CH API base
 */
function chBase(): string
{
    return rtrim(config('ch.base', 'https://api.company-information.service.gov.uk'), '/');
}

/**
 * Search endpoint for autocomplete
 * GET /api/ch/search?q=apple
 * Returns: { items: [{number, name, address, status, date_of_creation}, ...] }
 */
Route::get('/ch/search', function (Request $request) {
    $q = trim((string) $request->query('q', ''));
    if ($q === '' || mb_strlen($q) < 2) {
        return response()->json(['items' => []]);
    }

    $res = chClient()->get(chBase() . '/search/companies', [
        'q'              => $q,
        'items_per_page' => 10,
    ])->throw()->json();

    $items = collect($res['items'] ?? [])->map(function ($it) {
        return [
            'number'           => $it['company_number']     ?? null,
            'name'             => $it['title']               ?? null,
            'address'          => $it['address_snippet']     ?? null,
            'status'           => $it['company_status']      ?? null,
            'date_of_creation' => $it['date_of_creation']    ?? null,
        ];
    })->values()->all();

    return response()->json(['items' => $items]);
});

/**
 * Full company details by number
 * GET /api/ch?number=13493038
 * Returns a consolidated JSON with company, accounts, CS, office, directors, PSCs
 */
Route::get('/ch', function (Request $request) {
    $number = preg_replace('/\s+/', '', (string) $request->query('number', ''));

    if ($number === '') {
        return response()->json(['ok' => false, 'error' => 'Missing ?number'], 422);
    }

    $base = chBase();
    $http = chClient();

    // 1) Company profile
    $profile = $http->get("$base/company/$number")->throw()->json();

    // 2) Officers (try register_view first, then fallback)
    $officers = $http->get("$base/company/$number/officers", [
        'items_per_page' => 100,
        'register_view'  => true,
    ]);

    if (!$officers->ok() || $officers->status() >= 500) {
        $officers = $http->get("$base/company/$number/officers", [
            'items_per_page' => 100,
        ]);
    }
    $officers = $officers->ok() ? $officers->json() : [];

    // 3) PSCs
    $pscs = $http->get("$base/company/$number/persons-with-significant-control", [
        'items_per_page' => 100,
    ]);
    $pscs = $pscs->ok() ? $pscs->json() : [];

    // Build directors list (names only)
    $directors = collect($officers['items'] ?? [])
        ->filter(function ($o) {
            return strtolower($o['officer_role'] ?? '') === 'director';
        })
        ->map(function ($o) {
            // Prefer "name" if present
            if (!empty($o['name'])) {
                return $o['name'];
            }
            // If not, try to assemble from name fields
            $n = $o['name_elements'] ?? [];
            return trim(implode(' ', array_filter([
                $n['title']    ?? null,
                $n['forename'] ?? null,
                $n['other_forenames'] ?? null,
                $n['surname']  ?? null,
            ])));
        })
        ->filter()
        ->values()
        ->all();

    // Build PSCs list (name + kind only to keep it small)
    $pscList = collect($pscs['items'] ?? [])
        ->map(function ($p) {
            $name = $p['name'] ?? null;
            if (!$name) {
                $n = $p['name_elements'] ?? [];
                $name = trim(implode(' ', array_filter([
                    $n['title']    ?? null,
                    $n['forename'] ?? null,
                    $n['other_forenames'] ?? null,
                    $n['surname']  ?? null,
                ])));
            }
            return [
                'name' => $name ?: null,
                'kind' => $p['kind'] ?? null,
            ];
        })
        ->filter(fn($x) => $x['name'])
        ->values()
        ->all();

    // Registered office mapping
    $addr = $profile['registered_office_address'] ?? [];
    $office = [
        'premises'       => $addr['premises']       ?? null,
        'address_line_1' => $addr['address_line_1'] ?? null,
        'address_line_2' => $addr['address_line_2'] ?? null,
        'locality'       => $addr['locality']       ?? null,
        'postal_code'    => $addr['postal_code']    ?? null,
        'country'        => $addr['country']        ?? null,
    ];

    // Accounts and confirmation statement
    $accounts      = $profile['accounts']               ?? [];
    $confirmation  = $profile['confirmation_statement'] ?? [];

    $result = [
        'ok'      => true,
        'number'  => $profile['company_number'] ?? $number,
        'company' => [
            'name'   => $profile['company_name']   ?? null,
            'status' => $profile['company_status'] ?? null,
        ],
        'created'          => $profile['date_of_creation'] ?? null,
        'registered_office'=> $office,
        'accounts' => [
            'next_due'                  => $accounts['next_due']                  ?? null,
            'last_made_up_to'           => data_get($accounts, 'last_accounts.made_up_to'),
            'next_made_up_to'           => $accounts['next_made_up_to'] ?? data_get($accounts, 'next_accounts.period_end_on'),
            'accounting_reference_date' => $accounts['accounting_reference_date'] ?? null,
        ],
        'confirmation' => [
            'next_due'        => $confirmation['next_due']        ?? null,
            'next_made_up_to' => $confirmation['next_made_up_to'] ?? null,
            'last_made_up_to' => $confirmation['last_made_up_to'] ?? null,
        ],
        'directors'    => $directors,
        'pscs'         => $pscList,
        'company_url'  => "https://find-and-update.company-information.service.gov.uk/company/" . ($profile['company_number'] ?? $number),
    ];

    return response()->json($result);
});
